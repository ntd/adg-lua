--[[

This file is part of adg-lua.
Copyright (C) 2012-2013  Nicola Fontana <ntd at entidi.it>

adg-lua is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

adg-lua is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General
Public License along with adg-lua; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA.

]]


-- Path where the ADG library is installed: used for accessing
-- shared resources such as icons and GtkBuilder XML files.
local adg_data_dir = '@ADGDATADIR@'

-- This hack checks if ADGDATADIR has been expanded by
-- configure and provides a fallback otherwise. It allows to
-- directly run adg-demo.lua.in if ADG is installed in the
-- /usr prefix (as it happens to be on my system ;).
if adg_data_dir == '@ADGDATADIR' .. '@' then
    adg_data_dir = '/usr/share/adg'
end


local lgi    = require 'lgi'
local GLib   = lgi.require 'GLib'
local Gtk    = lgi.require 'Gtk'
local Adg    = lgi.require 'Adg'
local Piston = require 'piston'


-- User interface initialization

Adg.gtk_use_default_icons(adg_data_dir)


-- Customize error handler

error = function (message)
    local dialog = Gtk.MessageDialog {
	dialog_flags = Gtk.DialogFlags.DESTROY_WITH_PARENT,
	message_type = Gtk.MessageType.ERROR,
	buttons = Gtk.Buttons.CLOSE,
	text = message,
	title = 'Error from adg-demo',
    }
    dialog:run()
end


-- Part definition

local piston = Piston.new {
    A       = 55,
    B       = 20.6,
    C       = 2,
    DHOLE   = 2,
    LHOLE   = 3,
    D1      = 9.3,
    D2      = 6.5,
    D3      = 13.8,
    D4      = 6.5,
    D5      = 4.5,
    D6      = 7.2,
    D7      = 2,
    RD34    = 1,
    RD56    = 0.2,
    LD2     = 7,
    LD3     = 3.5,
    LD5     = 5,
    LD6     = 1,
    LD7     = 0.5,
    GROOVE  = false,
    ZGROOVE = 16,
    DGROOVE = 8.3,
    LGROOVE = 1,

    -- Metadata
    TITLE   = 'SAMPLE DRAWING',
    DRAWING = 'PISTON',
    AUTHOR  = 'adg-demo',
    DATE    = os.date('%d/%m/%Y'),
}


-- GtkBuilder initialization

local builder = Gtk.Builder()
builder:add_from_file(adg_data_dir .. '/adg-demo.ui')
local ui = builder.objects


-- Canvas settings

local canvas = piston.view.detailed
canvas:set_paper('iso_a4', Gtk.PageOrientation.LANDSCAPE)
ui.mainCanvas:set_canvas(canvas)
canvas:autoscale()


-- Help dialog

ui.mainHelp.on_clicked = function ()
    local dialog = ui.wndHelp
    dialog.on_response = Gtk.Widget.hide
    dialog:run()
end


-- About dialog

ui.mainAbout.on_clicked = function ()
    local dialog = ui.wndAbout
    local icon_list = Gtk.Window.get_default_icon_list()

    -- The last icon is supposed to be the largest one:
    -- check adg_gtk_use_default_icons() implementation.
    local last_icon = icon_list[#icon_list]
    dialog:set_logo(last_icon)

    dialog.on_response = Gtk.Widget.hide
    dialog:run()
end


-- Edit dialog

local function entry_info(widget)
    if Gtk.ToggleButton:is_type_of(widget) then
	-- Boolean value
	return 'get_active', 'set_active', 'on_toggled'
    elseif Gtk.Entry:is_type_of(widget) then
	-- String value
	return 'get_text', 'set_text', 'on_changed'
    elseif Gtk.SpinButton:is_type_of(widget) then
	-- Number value
	return 'get_value', 'set_value', 'on_changed'
    else
	-- Unhandled type
	return
    end
end

for field in pairs(piston.data) do
    local widget = ui['edit' .. field]
    if widget then
	-- Synchronize GtkSpinButton to GtkAdjustment, that is
	-- initialize the widget to its default value
	if Gtk.SpinButton:is_type_of(widget) then
	    local adj = widget:get_adjustment()
	    adj:value_changed()
	end

	-- Unlock the UI on every widget change
	local getter, _, notification = entry_info(widget)
	widget[notification] = function ()
	    ui.btnApply:set_sensitive(true)
	    ui.btnReset:set_sensitive(true)
	end
	piston.data[field] = widget[getter](widget)
    end
end

local function view_to_model()

end

ui.mainEdit.on_clicked = function ()
    local dialog = ui.wndEdit
    dialog:set_position(Gtk.WindowPosition.MOUSE);

    local function lock_ui()
	ui.btnApply:set_sensitive(false)
	ui.btnReset:set_sensitive(false)
    end

    ui.btnApply.on_clicked = function ()
	-- Refresh the piston data using the widgets
	for field in pairs(piston.data) do
	    local widget = ui['edit' .. field]
	    local getter = entry_info(widget)
	    if getter then
		piston.data[field] = widget[getter](widget)
	    end
	end

	-- Regenerate all the models
	for _, model in pairs(piston.model) do
	    model:reset()
	    model:regenerate(piston)
	    model:changed()
	end

	-- Refresh the GTK+ interface
	ui.mainCanvas:queue_draw()

	lock_ui()
    end

    ui.btnReset.on_clicked = function ()
	-- Update the widgets using the piston data
	for field, value in pairs(piston.data) do
	    local widget = ui['edit' .. field]
	    local _, setter = entry_info(widget)
	    if setter then
		widget[setter](widget, value)
	    end
	end

	lock_ui()
    end

    dialog.on_response = Adg.gtk_window_hide_here
    dialog:run()
end


-- Save as dialog

ui.mainSaveAs.on_clicked = function ()
    local dialog = ui.wndSaveAs

    -- Set the default destination file and directory
    local dir = nil
    if GLib.UserDirectory then
	-- Issue: http://github.com/pavouk/lgi/issues/45
	local dir_type = GLib.UserDirectory.DOCUMENTS or
			 GLib.UserDirectory.DIRECTORY_DOCUMENTS
	dir = GLib.get_user_special_dir(dir_type)
    end
    dir = dir or GLib.get_home_dir()
    dialog:set_current_folder(dir)
    dialog:set_current_name('adg-demo')

    -- Response handling
    dialog.on_response = function (dialog, response)
	if response == Gtk.ResponseType.OK then
	    -- Retrieve the file suffix (format type)
	    local suffix
	    for _, radio in pairs(ui.saveAsPng:get_group()) do
		if radio:get_active() then
		    suffix = radio:get_tooltip_markup()
		    break
		end
	    end
	    local file = dialog:get_filename()
	    if not GLib.str_has_suffix(file, suffix) then
		file = file .. suffix
	    end
	    _, err = canvas:export(file)
	    if err then error(err) end
	end
	dialog:hide()
    end

    dialog:run()
end


-- Print dialog

do
local settings

ui.mainPrint.on_clicked = function ()
    local operation = Gtk.PrintOperation.new()

    operation:set_use_full_page(operation, false)
    operation:set_unit(Gtk.Unit.POINTS)

    if settings then
	operation:set_print_settings(settings)
    end

    if Gtk.PrintOperation.set_embed_page_setup then
	operation:set_embed_page_setup(true)
    end

    local page_setup = canvas:get_page_setup()
    if page_setup then
        operation:set_default_page_setup(page_setup)
    end

    operation.on_begin_print = function ()
	operation:set_n_pages(1)
    end

    operation.on_draw_page = function (operation, context)
	local cr = context:get_cairo_context()

	local old_map = canvas:get_global_map()
	canvas:set_global_map(Adg.matrix_identity())
	canvas:render(cr)
	canvas:set_global_map(old_map)
    end

    local result, err = operation:run(Gtk.PrintOperationAction.PRINT_DIALOG, ui.wndMain)
    if result == Gtk.PrintOperationResult.APPLY then
        settings = operation:get_print_settings()
    elseif err then
	error(err)
    end
end

end


-- Quit command

ui.mainQuit.on_clicked = Gtk.main_quit


-- Main window

local window = ui.wndMain
window.on_delete_event = Gtk.main_quit
window:show_all()


Gtk.main()
