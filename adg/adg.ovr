--[[

adg-lua - lgob based Lua bindings for the ADG canvas
Copyright (C) 2011  Nicola Fontana <ntd at entidi.it>

adg-lua is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

adg-lua is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with adg-lua.  If not, see <http://www.gnu.org/licenses/>.

--]]

require 'api'
defName = 'adg'


-- Additional types

Types['CpmlPrimitive* none'] = {
    arg = function(pos, tables)
        table.insert(tables['args'], string.format('arg%i', pos))
        table.insert(tables['input'], string.format([[
        Object* oarg%i = lua_touserdata(L, %i);
        void* arg%i = oarg%i ? oarg%i->pointer : NULL;]],
        pos, pos, pos, pos, pos))
    end,
    ret = function(tables)
        table.insert(tables['return'], 'special_type_new(L, "cpmlPrimitiveMT", (gpointer) ret);')
    end,
    type = 'gconstpointer',
}
Types['gboolean none'] = Types['boolean none']
Types['gint none'] = Types['int none']
Types['gulong none'] = Types['unsigned long none']
Types['gdouble none'] = Types['double none']
Types['gchar* none'] = Types['char* none']
Types['AdgDress none'] = Types['int none']


-- AdgPair

defType('AdgPair', {})

defFunction('adg_pair_new', {
    class = 'AdgPair',
    constructor = true,
    since = '1.0',
    ret = 'struct* none'
})

defOverride('adg_pair_new', [[
    special_type_new(L, "adgPairMT", g_new0(AdgPair, 1));
    return 1;
]])


-- AdgMatrix

defType('AdgMatrix', {})

defFunction('adg_matrix_new', {
    class = 'AdgMatrix',
    constructor = true,
    since = '1.0',
    ret = 'struct* none'
})

defOverride('adg_matrix_new', [[
    AdgMatrix *matrix = g_new(AdgMatrix, 1);
    cairo_matrix_init_identity(matrix);
    special_type_new(L, "adgMatrixMT", matrix);
    return 1;
]])

defOverride('adg_matrix_new', [[
    AdgMatrix *matrix = g_new(AdgMatrix, 1);
    cairo_matrix_init_identity(matrix);
    special_type_new(L, "adgMatrixMT", matrix);
    return 1;
]])


-- Custom redefinitions

defFunction('adg_path_over_primitive', {
    class = 'AdgPath',
    since = '1.0',
    args = {'GObject* none'},
    ret = 'CpmlPrimitive* none'
})

defFunction('adg_path_last_primitive', {
    class = 'AdgPath',
    since = '1.0',
    args = {'GObject* none'},
    ret = 'CpmlPrimitive* none'
})
